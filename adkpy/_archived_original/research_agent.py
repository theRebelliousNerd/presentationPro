# --- METADATA ---
name = "ResearchAgent"
description = "Curates best-practice guidance for presentation background design, focusing on non-photographic styles and optionally grounding suggestions in web search results."
author = "Google ADK Example"
license = "Apache 2.0"
version = "1.0.0"
homepage = "https://github.com/google/agent-development-kit"
# --- END METADATA ---

from typing import List, Optional
from pydantic import BaseModel, Field
from .base import BaseAgent, AgentResult
from tools.web_search_tool import WebSearchTool


class Input(BaseModel):
    """
    Defines the input parameters for the ResearchAgent.
    """
    query: Optional[str] = Field(
        default=None,
        description="An optional, specific query for the web search to override the default."
    )
    topK: Optional[int] = Field(
        default=5,
        description="The number of top search results to consider as evidence."
    )
    allowDomains: Optional[List[str]] = Field(
        default=None,
        description="An optional list of domains to restrict the web search to."
    )


class Output(BaseModel):
    """
    Defines the structured output generated by the ResearchAgent.
    """
    rules: List[str] = Field(
        description="A list of 8-12 best-practice rules for presentation background design."
    )


class Agent(BaseAgent):
    """
    An agent that researches and summarizes best practices for presentation
    backgrounds, with a focus on legibility and accessibility.
    """

    def run(self, data: Input) -> AgentResult:
        """
        Executes the agent's logic to research and summarize design rules.

        Args:
            data: An instance of the Input model containing web search parameters.

        Returns:
            An AgentResult containing the list of design rules and LLM usage statistics.
        """
        evidence = self._get_web_evidence(data)

        system_prompt = (
            "You are a professional design research assistant. Your task is to summarize the key best practices "
            "for creating effective presentation backgrounds. You must exclude advice related to using a 'full-bleed photo' "
            "where the speaker does all the talking. Instead, focus your summary on practical rules for legibility, "
            "minimalism, color theory, contrast, appropriate use of textures or patterns, and accessibility considerations."
        )

        prompt_messages = [
            {"role": "system", "content": system_prompt},
        ]
        
        if evidence:
            prompt_messages.append({"role": "user", "content": f"Please base your summary on the following evidence from recent web search results:\n\n{evidence}"})

        prompt_messages.append({"role": "user", "content": "Return your summary as a list of 8 to 12 concise, single-line bulleted rules."})

        # Call the language model.
        text, usage = self.llm(prompt_messages)

        # Process the raw text output into a clean list of strings.
        rules = [
            line.strip("-* ")
            for line in text.split("\n")
            if line.strip() and len(line.strip()) > 5
        ][:12] # Take up to 12 valid rules.
        
        output_data = Output(rules=rules)
        
        return AgentResult(data=output_data.model_dump(), usage=usage)

    def _get_web_evidence(self, data: Input) -> str:
        """
        Performs a web search to ground the LLM's response in recent data.
        """
        try:
            query = (data.query or "presentation background best practices for legibility, minimalism, and accessibility")
            tool = WebSearchTool(allow_domains=data.allowDomains)
            results = tool.search(query, top_k=int(data.topK or 5))
            return "\n".join([f"- {r.title}\n  Snippet: {r.snippet}\n  Source: {r.url}" for r in results])
        except Exception as e:
            # Silently fail if the tool isn't available or an error occurs.
            print(f"Web search tool failed: {e}")
            return ""