# --- METADATA ---
name = "DesignAgent"
description = "Proposes background visuals for a presentation slide, generating either direct CSS/SVG code or a descriptive image prompt."
author = "Google ADK Example"
license = "Apache 2.0"
version = "1.0.0"
homepage = "https://github.com/google/agent-development-kit"
# --- END METADATA ---

from typing import Any, Dict, List, Literal, Optional
from pydantic import BaseModel, Field
from .base import BaseAgent, AgentResult, AgentUsage


class Input(BaseModel):
    """
    Defines the input parameters for the DesignAgent.
    """
    slide: Dict[str, Any] = Field(
        description="A dictionary representing the slide content, including 'title', 'content', etc."
    )
    theme: Literal["brand", "muted", "dark"] = Field(
        default="brand",
        description="The overall color theme for the design."
    )
    pattern: Literal["gradient", "shapes", "grid", "dots", "wave"] = Field(
        default="gradient",
        description="The type of visual pattern to generate for the background."
    )
    screenshotDataUrl: Optional[str] = Field(
        default=None,
        description="Optional Data URL of a slide screenshot for context-aware design."
    )
    researchRules: Optional[List[str]] = Field(
        default=None,
        description="Optional list of design best-practice rules to guide the generation."
    )
    preferCode: bool = Field(
        default=False,
        description="If true, forces the agent to attempt generating code (CSS/SVG) instead of a prompt."
    )


class Output(BaseModel):
    """
    Defines the structured output generated by the DesignAgent.
    """
    type: Literal["code", "prompt"] = Field(
        description="Indicates whether the output is code or a prompt."
    )
    code: Optional[Dict[str, Optional[str]]] = Field(
        default=None,
        description="A dictionary containing 'css' and/or 'svg' code strings, if type is 'code'."
    )
    prompt: Optional[str] = Field(
        default=None,
        description="A descriptive text prompt for an image generation model, if type is 'prompt'."
    )


class Agent(BaseAgent):
    """
    An agent that designs slide backgrounds by generating either renderable
    code (CSS, SVG) or a descriptive prompt for an image model.
    """

    def run(self, data: Input) -> AgentResult:
        """
        Executes the agent's logic to generate a slide background design.

        Args:
            data: An instance of the Input model containing slide content and design preferences.

        Returns:
            An AgentResult containing the design output (code or prompt) and usage statistics.
        """
        # Path 1: Generate code directly for simple, geometric patterns.
        if data.preferCode or data.pattern in ("grid", "dots", "wave"):
            return self._generate_code(data)

        # Path 2: Call the LLM to generate a creative image prompt.
        return self._generate_prompt(data)

    def _generate_code(self, data: Input) -> AgentResult:
        """Generates CSS and SVG code for the slide background."""
        theme_css = {
            "brand": "linear-gradient(135deg, rgba(46,204,113,0.25), rgba(52,152,219,0.25))",
            "muted": "linear-gradient(135deg, rgba(149,165,166,0.25), rgba(236,240,241,0.25))",
            "dark": "linear-gradient(135deg, rgba(44,62,80,0.6), rgba(52,73,94,0.6))",
        }
        css_bg = theme_css.get(data.theme, theme_css["brand"])
        svg = self._get_svg_pattern(data.pattern)

        usage = AgentUsage(model="code", promptTokens=0, completionTokens=0, durationMs=1)
        output_data = Output(type="code", code={"css": css_bg, "svg": svg})
        return AgentResult(data=output_data.model_dump(), usage=usage)

    def _get_svg_pattern(self, pattern: str) -> Optional[str]:
        """Returns the SVG string for a given pattern."""
        if pattern == "grid":
            return (
                "<svg xmlns='http://www.w3.org/2000/svg' width='1280' height='720'>"
                "<defs><pattern id='grid' width='40' height='40' patternUnits='userSpaceOnUse'>"
                "<path d='M 40 0 L 0 0 0 40' fill='none' stroke='rgba(255,255,255,0.08)' stroke-width='1'/></pattern></defs>"
                "<rect width='100%' height='100%' fill='url(#grid)' /></svg>"
            )
        if pattern == "dots":
            dots = "\n".join([f"<circle cx='{(i*80)%1280}' cy='{(i*50)%720}' r='3'/>" for i in range(60)])
            return (
                "<svg xmlns='http://www.w3.org/2000/svg' width='1280' height='720'><g fill='rgba(255,255,255,0.06)'>"
                + dots + "</g></svg>"
            )
        if pattern == "wave":
            return (
                "<svg xmlns='http://www.w3.org/2000/svg' width='1280' height='720'>"
                "<path d='M0,420 C320,320 560,520 1280,380 L1280,720 L0,720 Z' fill='rgba(255,255,255,0.08)'/>"
                "<path d='M0,520 C320,420 560,620 1280,480 L1280,720 L0,720 Z' fill='rgba(255,255,255,0.05)'/></svg>"
            )
        return None

    def _generate_prompt(self, data: Input) -> AgentResult:
        """Generates a descriptive image prompt using the language model."""
        system_prompt = (
            "You are a creative Design Agent. Your task is to craft a descriptive background image prompt for a presentation slide. "
            "The prompt should describe a visually appealing, abstract background. It must not include any text, letters, or logos. "
            "The final image must maximize the legibility of text that will be placed on top of it, so avoid overly busy or high-contrast patterns."
        )

        prompt_messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"The slide's title is: '{data.slide.get('title', 'Untitled')}'"},
            {"role": "user", "content": f"Generate a prompt that fits a '{data.theme}' theme and incorporates a '{data.pattern}' pattern."},
        ]

        if data.researchRules:
            rules_text = "\n- ".join(data.researchRules)
            prompt_messages.append({"role": "user", "content": f"Incorporate these design principles:\n- {rules_text}"})

        prompt_messages.append({"role": "user", "content": "Return only the final, concise prompt as plain text."})

        text, usage = self.llm(prompt_messages)
        output_data = Output(type="prompt", prompt=text.strip())
        return AgentResult(data=output_data.model_dump(), usage=usage)