# --- METADATA ---
name = "ScriptWriter"
description = "Produces a presenter-ready script with smooth transitions, inline citations, and a concluding bibliography based on slide content and source assets."
author = "Google ADK Example"
license = "Apache 2.0"
version = "1.0.0"
homepage = "https://github.com/google/agent-development-kit"
# --- END METADATA ---

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field
from .base import BaseAgent, AgentResult


class Input(BaseModel):
    """
    Defines the input parameters for the ScriptWriter agent.
    """
    slides: List[Dict[str, Any]] = Field(
        description="A list of slide objects, each containing a 'title', 'content' (list of bullets), and 'speakerNotes'."
    )
    assets: Optional[List[Dict[str, Any]]] = Field(
        default=None,
        description="An optional list of asset dictionaries, each containing 'name' and 'url', to be used for inline citations and the bibliography."
    )


class Output(BaseModel):
    """
    Defines the structured output generated by the ScriptWriter agent.
    """
    script: str = Field(
        description="The final, presenter-ready script, formatted as a single string with inline citations and a bibliography."
    )


class Agent(BaseAgent):
    """
    An agent that transforms a series of slides and assets into a cohesive,
    well-cited presenter script.
    """

    def run(self, data: Input) -> AgentResult:
        """
        Executes the agent's logic to generate the presenter script.

        Args:
            data: An instance of the Input model containing the slide deck
                  and asset information.

        Returns:
            An AgentResult containing the generated script and LLM usage statistics.
        """
        slides_full_text = self._format_slides(data.slides)
        assets_full_text = self._format_assets(data.assets)

        system_prompt = (
            "You are an expert ScriptWriter. Your task is to produce a polished, presenter-ready script based on the provided slide content. "
            "You must ensure there are smooth and logical transitions between each slide's topic. "
            "Where appropriate, cite the provided sources inline using the format [ref: filename]. "
            "Conclude the entire script with a 'Bibliography' section that lists all the provided assets."
        )
        
        # Construct the prompt with conditional inclusion of assets.
        prompt_messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Here is the content for the slides:\n\n{slides_full_text}"},
        ]

        if assets_full_text:
            prompt_messages.append({"role": "user", "content": f"Use the following assets for inline citations and the final bibliography:\n{assets_full_text}"})

        prompt_messages.append({"role": "user", "content": "Now, generate the complete script as plain text."})

        # Call the language model.
        text, usage = self.llm(prompt_messages)

        # Structure the final output using the Pydantic model.
        output_data = Output(script=text.strip())

        return AgentResult(data=output_data.model_dump(), usage=usage)

    def _format_slides(self, slides: List[Dict[str, Any]]) -> str:
        """Formats the slide content into a single, readable text block for the prompt."""
        blocks = []
        for i, slide in enumerate(slides):
            lines = [f"## Slide {i+1}"]
            lines.append(f"Title: {slide.get('title', 'N/A')}")
            bullets = "\n".join([f"- {b}" for b in (slide.get('content') or [])])
            if bullets:
                lines.append("Content:")
                lines.append(bullets)
            lines.append(f"Speaker Notes: {slide.get('speakerNotes', 'N/A')}")
            blocks.append("\n".join(lines))
        return "\n\n".join(blocks)

    def _format_assets(self, assets: Optional[List[Dict[str, Any]]]) -> str:
        """Formats the assets into a text block to be used for the bibliography."""
        if not assets:
            return ""
        return "\n".join([
            f"- {asset.get('name', 'N/A')} â€” {asset.get('url', 'N/A')}"
            for asset in assets
        ])