# --- METADATA ---
name = "CriticAgent"
description = "Enforces quality gates on slide drafts, corrects them based on specific rules, and produces a final, polished slide."
author = "Google ADK Example"
license = "Apache 2.0"
version = "1.0.0"
homepage = "https://github.com/google/agent-development-kit"
# --- END METADATA ---

import json
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field
from .base import BaseAgent, AgentResult


class Input(BaseModel):
    """
    Defines the input parameters for the CriticAgent.
    """
    slideDraft: Dict[str, Any] = Field(
        description="A dictionary containing the draft slide content to be reviewed and corrected."
    )
    constraints: Optional[Dict[str, Any]] = Field(
        default=None,
        description="An optional dictionary of specific constraints to enforce during the critique."
    )
    assets: Optional[List[Dict[str, Any]]] = Field(
        default=None,
        description="A list of asset dictionaries to use for fact-checking and grounding citations."
    )


class Output(BaseModel):
    """
    Defines the structured output of the corrected slide generated by the CriticAgent.
    """
    title: str = Field(
        description="The corrected, sharp title for the slide (typically 3–6 words)."
    )
    content: List[str] = Field(
        description="The corrected list of 2–4 bullet points, each 12 words or fewer."
    )
    speakerNotes: str = Field(
        description="The corrected, concise speaker notes."
    )
    imagePrompt: str = Field(
        description="The corrected image prompt, ensuring it aligns with the final content."
    )


class Agent(BaseAgent):
    """
    An agent that acts as a quality gate, reviewing a slide draft against a set
    of rules and outputting a corrected version.
    """

    def run(self, data: Input) -> AgentResult:
        """
        Executes the agent's logic to critique and correct a slide draft.

        Args:
            data: An instance of the Input model containing the slide draft and contextual assets.

        Returns:
            An AgentResult containing the corrected slide data and LLM usage statistics.
        """
        assets_block = "\n\n".join([
            f"- {asset.get('name', '')}: {(asset.get('text') or '')[:400]}"
            for asset in (data.assets or []) if asset.get('text')
        ])

        system_prompt = (
            "You are an expert presentation Critic. Your job is to rigorously enforce quality standards on a draft slide. "
            "You must adhere to the following rules:\n"
            "- The title must be sharp, specific, and between 3 to 6 words.\n"
            "- There must be 2 to 4 bullet points.\n"
            "- Each bullet point must be 12 words or less.\n"
            "- The content must incorporate specific facts from the provided assets.\n"
            "- Cite assets directly in the text where facts are used, using the format [ref: filename].\n"
            "- Speaker notes must be concise and directly support the slide content.\n"
            "You must return the fully corrected slide as a single, valid JSON object."
        )

        prompt_messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Here are the assets for fact-checking and citation:\n{assets_block}" if assets_block else "No assets provided."},
            {"role": "user", "content": f"Here is the draft slide JSON to critique and correct:\n{json.dumps(data.slideDraft)}"},
            {"role": "user", "content": "Return a single, valid JSON object with the corrected slide, including the keys: title, content, speakerNotes, and imagePrompt."}
        ]

        text, usage = self.llm(prompt_messages)

        try:
            cleaned_text = text.strip().removeprefix("```json").removesuffix("```")
            obj = json.loads(cleaned_text)
            output_data = Output(**obj)
        except (json.JSONDecodeError, TypeError):
            # Fallback: if parsing fails, return the original draft to avoid breaking the workflow.
            output_data = Output(**data.slideDraft)

        return AgentResult(data=output_data.model_dump(), usage=usage)