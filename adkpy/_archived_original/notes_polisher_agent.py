# --- METADATA ---
name = "NotesPolisherAgent"
description = "Rephrases speaker notes to target a specific tone (e.g., professional, concise) and improve readability."
author = "Google ADK Example"
license = "Apache 2.0"
version = "1.0.0"
homepage = "https://github.com/google/agent-development-kit"
# --- END METADATA ---

from typing import Literal
from pydantic import BaseModel, Field
from .base import BaseAgent, AgentResult


class Input(BaseModel):
    """
    Defines the input parameters for the NotesPolisherAgent.
    """
    speakerNotes: str = Field(
        description="The original speaker notes that need to be rephrased."
    )
    tone: Literal["professional", "concise", "engaging", "casual"] = Field(
        default="professional",
        description="The target tone for the rephrased speaker notes."
    )


class Output(BaseModel):
    """
    Defines the structured output generated by the NotesPolisherAgent.
    """
    rephrasedSpeakerNotes: str = Field(
        description="The polished, rephrased version of the speaker notes."
    )


class Agent(BaseAgent):
    """
    An agent that refines and polishes speaker notes to match a desired tone
    and improve clarity.
    """

    def run(self, data: Input) -> AgentResult:
        """
        Executes the agent's logic to rephrase the speaker notes.

        Args:
            data: An instance of the Input model containing the speaker notes and target tone.

        Returns:
            An AgentResult containing the rephrased notes and LLM usage statistics.
        """
        system_prompt = (
            f"You are an expert communications coach acting as a NotesPolisher. Your task is to rewrite the provided speaker notes. "
            f"The rewritten notes must adopt a '{data.tone}' tone. They should be clear, easy to read, and effective for a presenter. "
            "Focus on improving flow and impact while retaining the core message."
        )

        prompt_messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Here are the speaker notes to polish:\n\n{data.speakerNotes}"},
            {"role": "user", "content": "Return only the rephrased plain text and nothing else."},
        ]

        # Call the language model.
        text, usage = self.llm(prompt_messages)
        
        output_data = Output(rephrasedSpeakerNotes=text.strip())

        return AgentResult(data=output_data.model_dump(), usage=usage)