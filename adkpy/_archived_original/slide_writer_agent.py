# --- METADATA ---
name = "SlideWriter"
description = "Generates the content for a single presentation slide, including a title, 2-4 bullet points, concise speaker notes, and a descriptive image prompt."
author = "Google ADK Example"
license = "Apache 2.0"
version = "1.0.0"
homepage = "https://github.com/google/agent-development-kit"
# --- END METADATA ---

import json
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field
from .base import BaseAgent, AgentResult


class Input(BaseModel):
    """
    Defines the input parameters for the SlideWriter agent.
    """
    title: str = Field(
        description="The title for the presentation slide to be generated."
    )
    assets: Optional[List[Dict[str, Any]]] = Field(
        default=None,
        description="A list of asset dictionaries, each containing 'name' and 'text', to ground the slide content in specific facts or data."
    )
    existing: Optional[Dict[str, Any]] = Field(
        default=None,
        description="An optional dictionary of existing slide content (e.g., title, bullets) to be refined or expanded upon."
    )
    constraints: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Optional constraints or specific instructions to guide content generation (e.g., 'focus on financial metrics')."
    )


class Output(BaseModel):
    """
    Defines the structured output generated by the SlideWriter agent for a single slide.
    """
    title: str = Field(
        description="The final, generated title for the slide."
    )
    content: List[str] = Field(
        description="A list of 2-4 concise bullet points for the slide body. Each bullet should be 12 words or fewer."
    )
    speakerNotes: str = Field(
        description="A paragraph of speaker notes followed by 3-5 key talking points or reminders, formatted as a string."
    )
    imagePrompt: str = Field(
        description="A descriptive prompt for an image generation model, designed to create a relevant and visually appealing background or image for the slide."
    )


class Agent(BaseAgent):
    """
    An agent that generates all necessary content for a single presentation slide
    based on a given title and optional contextual information.
    """

    def run(self, data: Input) -> AgentResult:
        """
        Executes the agent's logic to generate slide content.

        Args:
            data: An instance of the Input model containing the slide title and
                  any other contextual data.

        Returns:
            An AgentResult containing the generated slide content and LLM usage statistics.
        """
        assets_block = "\n\n".join([
            f"- {asset.get('name', '')}: {(asset.get('text') or '')[:800]}"
            for asset in (data.assets or []) if asset.get('text')
        ])

        system_prompt = (
            "You are an expert SlideWriter. Your task is to generate the content for a single slide. "
            "You must return a single, valid JSON object with the following keys: "
            "'title' (string), 'content' (an array of 2-4 strings, each 12 words or less), "
            "'speakerNotes' (a string containing a short paragraph and 3-5 bullet points for the presenter), "
            "and 'imagePrompt' (a descriptive string for an image generation model)."
        )

        prompt_messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Please generate a slide with the title: '{data.title}'"},
        ]

        if data.existing:
            prompt_messages.append({"role": "user", "content": f"Here is the existing content to refine or build upon:\n{json.dumps(data.existing)}"})
        
        if assets_block:
            prompt_messages.append({"role": "user", "content": f"Ground your facts and talking points in the following provided assets:\n{assets_block}"})

        if data.constraints:
            prompt_messages.append({"role": "user", "content": f"Adhere to the following constraints:\n{json.dumps(data.constraints)}"})

        prompt_messages.append({"role": "user", "content": "Return only the valid JSON object and nothing else."})

        text, usage = self.llm(prompt_messages)

        try:
            cleaned_text = text.strip().removeprefix("```json").removesuffix("```")
            obj = json.loads(cleaned_text)
            output_data = Output(**obj)
        except (json.JSONDecodeError, TypeError):
            # If parsing fails, use a default structure to avoid application errors.
            output_data = Output(
                title=data.title,
                content=["Error: Could not generate content.", "Please check model output."],
                speakerNotes="The language model failed to produce valid JSON. This is a fallback response.",
                imagePrompt="Abstract blue and white background with clean lines",
            )

        return AgentResult(data=output_data.model_dump(), usage=usage)