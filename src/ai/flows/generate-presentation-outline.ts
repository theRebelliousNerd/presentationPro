// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A flow to generate a presentation outline based on the clarified content from the chat.
 *
 * - generatePresentationOutline - A function that handles the generation of the presentation outline.
 * - GeneratePresentationOutlineInput - The input type for the generatePresentationOutline function.
 * - GeneratePresentationOutlineOutput - The return type for the generatePresentationOutline function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePresentationOutlineInputSchema = z.object({
  clarifiedContent: z
    .string()
    .describe('The clarified content from the chat, providing context for the presentation outline.'),
});
export type GeneratePresentationOutlineInput = z.infer<typeof GeneratePresentationOutlineInputSchema>;

const GeneratePresentationOutlineOutputSchema = z.object({
  slideTitles: z
    .array(z.string())
    .describe('An array of slide titles representing the presentation outline.'),
});
export type GeneratePresentationOutlineOutput = z.infer<typeof GeneratePresentationOutlineOutputSchema>;

export async function generatePresentationOutline(
  input: GeneratePresentationOutlineInput
): Promise<GeneratePresentationOutlineOutput> {
  return generatePresentationOutlineFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generatePresentationOutlinePrompt',
  input: {schema: GeneratePresentationOutlineInputSchema},
  output: {schema: GeneratePresentationOutlineOutputSchema},
  prompt: `You are an expert presentation designer.

  Based on the clarified content provided, generate a logical and coherent slide outline for a presentation.
  The outline should consist of an array of slide titles that cover the key points and flow logically.

  Use the following context about what makes a great presentation to inform your outline structure.
  START OF CONTEXT
  A summary of "The Orator's Crucible: An Analytical History of the World's Greatest Presenters":
  - Core Competencies: Audience Centricity, Narrative Structure, Emotional Resonance (pathos), Credibility/Confidence (ethos), Clarity/Logic (logos).
  - Key Insight: Greatness is not born, it's made through deliberate practice.
  - Techniques from the Masters:
    - Socrates: The Presenter as Inquisitor; co-creates understanding through dialogue and questioning.
    - Demosthenes: Forged eloquence through sheer will; known for vigorous, passionate style and powerful calls to action.
    - Cicero: The Architect of Rhetoric; master of logos, pathos, and ethos. Goal: to teach, to delight, and to move.
    - Martin Luther: The Plain-Spoken Revolutionary; used simple, direct, conversational style.
    - Queen Elizabeth I: Oratory as an Instrument of Rule; used strategic, paradoxical rhetoric and inclusive language.
    - Leonardo da Vinci: Presented the unseen world through visual thinking (saper vedere).
    - Abraham Lincoln: The Eloquence of Honesty; used profound simplicity, logical clarity, and a humble persona.
    - Frederick Douglass: The Voice of Lived Experience; combined classical rhetoric with the moral authority of his own story.
    - Susan B. Anthony: The Logic of Liberation; relied on incisive logical arguments (logos) and constitutional syllogism.
    - Steve Jobs: The Ultimate Product Evangelist; used minimalist visuals, the rule of three, and hero/villain storytelling.
    - Bill Gates: The Evolution of a Pragmatic Presenter; evolved from data-heavy to simplified, problem-solution narratives.
    - BrenÃ© Brown: The Power of Vulnerable Presentation; uses authentic, personal, and humorous storytelling.
    - Barack Obama: The Oratory of Unity; uses unifying narrative, allusion, and parallelism.
    - Malala Yousafzai: The Clarity of Courageous Conviction; uses her powerful personal story and simple, direct language.
  END OF CONTEXT

  Clarified Content: {{{clarifiedContent}}}

  Return a JSON array of strings, where each string is a slide title.
  `,
});

const generatePresentationOutlineFlow = ai.defineFlow(
  {
    name: 'generatePresentationOutlineFlow',
    inputSchema: GeneratePresentationOutlineInputSchema,
    outputSchema: GeneratePresentationOutlineOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
